name: CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    cleanup:
        runs-on: self-hosted
        steps:
            - name: Free up disk space
              run: |
                  sudo docker system prune -af
                  sudo docker volume prune -f
                  sudo apt-get clean
                  sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
                  sudo df -h

    deploy:
        needs: cleanup
        runs-on: self-hosted
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Create .cv_deploy.env
              run: |
                  echo "MODEL_PATH=${{ secrets.MODEL_PATH }}" >> .cv_deploy.env
                  echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .cv_deploy.env
                  echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .cv_deploy.env
                  echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .cv_deploy.env
                  echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .cv_deploy.env
                  echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .cv_deploy.env
                  echo "POSTGRES_URL=${{ secrets.POSTGRES_URL }}" >> .cv_deploy.env
                  echo "GEE_SERVICE_ACCOUNT_EMAIL=${{ secrets.GEE_SERVICE_ACCOUNT_EMAIL }}" >> .cv_deploy.env
                  echo "GEE_SERVICE_ACCOUNT_KEY_FILE=${{ secrets.GEE_SERVICE_ACCOUNT_KEY_FILE}}" >> .cv_deploy.env
                  echo "SERVER_URL=${{ secrets.SERVER_URL }}" >> .cv_deploy.env
                  echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .cv_deploy.env
                  echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .cv_deploy.env

            - name: Build and Deploy Docker Image
              run: |
                  docker-compose -f _cd_pipeline.yaml build
                  docker-compose -f _cd_pipeline.yaml down --remove-orphans
                  docker-compose -f _cd_pipeline.yaml up --build -d

            - name: Post-deployment cleanup
              if: always()
              run: |
                  docker system prune -af --volumes
                  docker image prune -af
                  docker volume prune -f
