version: "3"

services:
    nginx:
        container_name: api-gateway
        image: nginx:alpine
        ports:
            - "443:443" # HTTPS port
            - "80:80" # HTTP port (optional, for redirects)
        volumes:
            - /srv/api-gateway/conf.d:/etc/nginx/conf.d:ro
            - /etc/letsencrypt:/etc/letsencrypt:ro
        depends_on:
            - fastapi-app
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.5
        restart: always

    fastapi-app:
        container_name: cvdeploy
        build:
            context: .
        volumes:
            - ~/cv_model:/app/cv_model
            - ./app:/app/app
            - ./local_uploads:/app/local_uploads # Add this line
        expose:
            - "8001"
        env_file:
            - .cv_deploy.env
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.10
        restart: always
        user: "${UID}:${GID}"

    redis:
        container_name: redis-server
        image: "redis:latest"
        ports:
            - "6379:6379"
        volumes:
            - /redis_data:/data
            - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.7

    worker:
        container_name: celery_workers
        build:
            context: .
            dockerfile: Dockerfile.Celery
        command: celery -A app.services.celery.celery_config.celery_app worker --loglevel=info
        env_file:
            - .cv_deploy.env
        depends_on:
            - redis
            - fastapi-app
        networks:
            micro-services-network:
                ipv4_address: 192.168.0.8
        volumes:
            - ~/celery_store1:/celery-data
            - ~/cv_model:/app/cv_model
            - ./app:/app/app
            - ./local_uploads:/app/local_uploads # Add this line
        user: "${UID}:${GID}"

volumes:
    sentinel_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${PWD}/sentinel_data

networks:
    micro-services-network:
        driver: bridge
        ipam:
            config:
                - subnet: "192.168.0.0/24"
